"""
Documentation utilities for EDINET Data Getter
"""
import os
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
from .config import config


def generate_run_summary(documents: List[Dict], processed_data: List[Dict], start_date: str) -> str:
    """Generate a markdown summary of the processing run"""
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    summary = f"""# EDINET Data Processing Summary

## Run Information
- **Date**: {timestamp}
- **Start Date**: {start_date}
- **Total Documents Found**: {len(documents)}
- **Successfully Processed**: {len(processed_data)}

## Processing Results

### Successfully Processed Companies
"""
    
    for i, data in enumerate(processed_data, 1):
        company_name = data.get('企業名', 'Unknown')
        edinet_code = data.get('EDINETコード', 'N/A')
        summary += f"{i}. **{company_name}** (EDINET: {edinet_code})\n"
    
    summary += f"""
### Skipped Documents
Total skipped: {len(documents) - len(processed_data)}

## Configuration Used
- **XBRL Folder**: {config['xbrl_folder']}
- **JSON Folder**: {config['json_folder']}
- **Log Folder**: {config['log_folder']}
- **Company Count Limit**: {config['default_company_count']}

## Data Fields Extracted
- 配当性向 (Dividend Payout Ratio)
- EPS (Earnings Per Share)
- 株価収益率 (Price-to-Earnings Ratio)
- 営業CF (Operating Cash Flow)
- 営業利益率 (Operating Profit Margin)
- 配当利回り (Dividend Yield)
- 自己資本比率 (Equity Ratio)

---
Generated by EDINET Data Getter on {timestamp}
"""
    
    return summary


def save_run_summary(documents: List[Dict], processed_data: List[Dict], start_date: str) -> Path:
    """Save the run summary to a markdown file"""
    
    summary_content = generate_run_summary(documents, processed_data, start_date)
    
    # Create filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"run_summary_{start_date}_{timestamp}.md"
    filepath = config['md_folder'] / filename
    
    # Ensure directory exists
    config['md_folder'].mkdir(exist_ok=True)
    
    # Write summary
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(summary_content)
    
    return filepath


def generate_config_documentation() -> str:
    """Generate technical documentation index for the md folder"""
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    doc = f"""# Technical Documentation | 技術ドキュメント

## 🇯🇵 日本語

このフォルダには、EDINET Data Getterの技術的なドキュメントが含まれています。

### ドキュメント一覧
- [config.md](config.md) - 設定ガイド（環境変数、認証情報の設定方法）
- [processing_flow.md](processing_flow.md) - 処理フローの詳細説明
- 処理結果レポート（実行時に自動生成）

### 自動生成されるファイル
実行すると以下のファイルが自動生成されます：
- `run_summary_YYYY-MM-DD_HHMMSS.md` - 各実行の結果サマリー

---

## 🇺🇸 English

This folder contains technical documentation for EDINET Data Getter.

### Document List
- [config.md](config.md) - Configuration guide (environment variables, authentication setup)
- [processing_flow.md](processing_flow.md) - Detailed processing flow explanation
- Processing result reports (automatically generated during execution)

### Auto-generated Files
The following files are automatically generated during execution:
- `run_summary_YYYY-MM-DD_HHMMSS.md` - Result summary for each execution

---

## 📊 Current Configuration Summary

- **Company Count Limit**: {config['default_company_count']}
- **Default Start Date**: {config['default_start_date']}
- **Sheet Name**: {config['sheet_name']}
- **JSON Folder**: {config['json_folder']}
- **Log Folder**: {config['log_folder']}
- **MD Folder**: {config['md_folder']}
- **XBRL Folder**: {config['xbrl_folder']}

## 💾 Extracted Data Fields
- 配当性向 (Dividend Payout Ratio)
- EPS (Earnings Per Share)
- 株価収益率 (Price-to-Earnings Ratio)
- 営業CF (Operating Cash Flow)
- 営業利益率 (Operating Profit Margin)
- 配当利回り (Dividend Yield)
- 自己資本比率 (Equity Ratio)

---
Last updated: {timestamp}
"""
    
    return doc


def save_config_documentation() -> Path:
    """Save the configuration documentation"""
    
    doc_content = generate_config_documentation()
    filepath = config['md_folder'] / "README.md"
    
    # Ensure directory exists
    config['md_folder'].mkdir(exist_ok=True)
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(doc_content)
    
    return filepath